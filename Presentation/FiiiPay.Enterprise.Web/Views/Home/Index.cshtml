@{
    ViewBag.Title = "Home Page";
    ViewBag.PageName = "Readme";
}
<div class="f-page">
    <div class="row">
        <div class="col-sm-3">
            <nav class="hidden-xs affix">
                <ul class="nav">
                    <li><a href="#f-page">页面结构与样式</a></li>
                    <li><a href="#f-language">多语言</a></li>
                    <li>
                        <a href="#f-jquery">Jquery组件的使用</a>
                        <ul class="nav">
                            <li><a href="#f-gridpager">GridPager</a></li>
                            <li><a href="#f-dateranger">Dateranger</a></li>
                        </ul>
                    </li>
                    <li><a href="#f-server">服务端</a></li>
                </ul>
            </nav>
        </div>
        <div class="f-docs col-sm-9 col-xs-12">
            <div id="f-page">
                <h2>页面结构与样式</h2>
                <p>
                    页面的样式基于Bootstrap 3.X, 引入了Bootstrap的所有样式和组件，请优先使用Bootstrap提供的样式和组件来编写页面代码<br />
                    <font class="text-warning">若对Bootstrap还不熟悉，建议编码前通读其官方文档</font>，<a href="https://v3.bootcss.com/getting-started" target="_blank">点击查看</a><br />
                    注: ~/Content/Site.css 用于定义通用性样式，如果要定义页面特定样式，请在page.css中编写，或新建css文件，在页面单独引入。
                </p>
                <h3>layout</h3>
                <p>
                    目前页面中包含两个layout页面：<br />
                    1)_Layout.cshtml 用户登录后的页面使用此模板页，通常应该选用此模板页<br />
                    2)_LayoutUnLogin.cshtml 用户未登录状态及第一次登陆的设置页面使用此模板页<br />
                </p>
                <h3>系统菜单</h3>
                <p>
                    菜单在~/Resources/MenuConfig.xml中配置，只支持到二级菜单。应该注意的是父子菜单的controllername应相同，且父菜单间的controllername不能重复.
                    节点属性说明：
                    <table class="table">
                        <tr>
                            <td>name</td>
                            <td>菜单英文名称</td>
                        </tr>
                        <tr>
                            <td>namecn</td>
                            <td>菜单中文名称</td>
                        </tr>
                        <tr>
                            <td>controllername</td>
                            <td>菜单链接地址的控制器名称。父级菜单虽然不用转跳，但仍需要此属性来与其子菜单关联，用于前端正确显示当前路径</td>
                        </tr>
                        <tr>
                            <td>actionname</td>
                            <td>菜单链接地址的方法名称。父级菜单不用设置</td>
                        </tr>
                    </table>
                </p>
                <h3>通用HTML元素</h3>
                <p>
                    1)Title 页面的&lt;title&gt;标签, 通过ViewBag.Title设置<br />
                    2)PageName 页面的功能标题，本页中PageName为Readme, 通过ViewBag.PageName设置<br />
                    请注意多语言显示，参考后面的多语言相关内容
                </p>
                <h3>响应式</h3>
                <p>
                    为了兼容不同的屏幕大小，请详细了解Bootstrap的栅格系统，<a href="https://v3.bootcss.com/css/#grid" target="_blank">点击查看</a><br />
                    表格组件gridpager可以在colmodel的配置中定义小屏幕隐藏列，来达到兼容不同屏幕的目的，参考gridpager的colmodel属性的hideinxs属性<br />
                    自定义样式若需要响应式样式，则以768px为媒体查询临界值，尽量采用Bootstrap提供的方法来编写响应式代码
                </p>
                <h3>通用样式</h3>
                <p>
                    1).f-page 页面容器，在较大尺寸的屏幕下添加了左右各50px的padding，较小屏幕则有较小的padding，对于设计中有内补的页面，都应使用此样式以保持所有页面的一致<br />
                </p>
                <p>
                    2).f-btn 按钮
                </p>
                <div class="row">
                    <div class="col-sm-4">
                        <p>.f-btn-small 较小button</p>
                        <button class="f-btn f-btn-small">small</button>
                    </div>
                    <div class="col-sm-4">
                        <p>.f-btn-normal 常规button</p>
                        <button class="f-btn f-btn-normal">normal</button>
                    </div>
                    <div class="col-sm-4">
                        <p>.f-btn-disabled 100%宽度button</p>
                        <button class="f-btn f-btn-normal f-btn-disabled">disabled</button>
                    </div>
                    <div class="col-xs-12">
                        <p>.f-btn-max 100%宽度button</p>
                        <button class="f-btn f-btn-max">max</button>
                    </div>
                </div>
            </div>
            <div id="f-language">
                <h2>多语言</h2>
                <p>有两个地方定义多语言文件：</p>
                <p>
                    1)~/Resources/XXX.resx 除了js脚本，均在此定义资源文件，建议按controller+action命名，如AccountLogin.resx<br />
                    2)~/Plugins/fiiipay/resources.js 定义js脚本所用的多语言字符串
                </p>
                <h3>路由</h3>
                <p>
                    我们没有缓存用户所选择的语言，当前语言通过路由lang获取。通过以下封装的方法获取当前语言<br />
                    1)Controller: base.CurrentLanguage(需继承自BaseController)<br />
                    2)View: ViewBag.WebLanguage<br />
                    3)Js: BaseFunction.GetLanguage()<br />
                    应避免对ViewBag.WebLanguage的赋值操作
                </p>
                <p>
                    因为没有缓存用户所选择的语言，所以在链接地址或提交地址均需要加上lang路由参数。<br />
                    示例：<br />
                    1)js转跳:
                       <pre>window.location.href = "/" + BaseFunction.GetLanguage() + "/MyAction";</pre>
                    2)a标签:
                       <pre>&lt;a href="/@@ViewBag.WebLanguage/MyAction"&gt;MyAction&lt;/a&gt;</pre>
                    3)form标签:
                    <pre>@@using (Html.BeginForm("MyAction", "MyController", new { lang = ViewBag.WebLanguage }, FormMethod.Post)){}</pre>
                    4)Controller中的页面转跳:
                    <pre>RedirectToAction("MyAction", "MyController", new { lang = CurrentLanguage });</pre>
                    注：所有Jquery组件包括ajax方法都有重载，已经在内部传递了当前页面语言，故不用再添加lang路由
                </p>
                <h3>获取多言语字符串</h3>
                <p>
                    1)Web项目的类: 引用Resource包后直接使用，如
                    <pre>GeneralResource.SaveFailed</pre>
                    2)Web视图:
                    <pre>@@Html.Resource("GeneralResource", "SaveFailed")</pre>
                    3)Business项目: 因资源文件是定义在Web项目中，Business中无法直接访问，我们在Business项目定义了类RequestResult，用于指定资源文件名和key值，返回后，在web项目中读取所对应的多语言字符串<br />
                    Business项目:
                    <pre>return new RequestResult(false, "AccountFirstSetting", "EmailBindByOtherAccount");</pre>
                    Web项目:
                    <pre>result.GetMessage()</pre>
                </p>
                <p>
                    以上3个方法为读取资源文件的方法，下面第4个方法为读取js中的多语言字符串<br />
                    定义:
                    <pre>
generalresource: {
        btncancel: { cn: '取消', en: 'Cancel' }
    }
</pre>
                    读取:
                    <pre>BaseFunction.getresource('generalresource','btncancel')</pre>
                </p>
            </div>
            <div id="f-jquery">
                <h2>Jquery组件的使用</h2>
                Jquery组件基本都有重载，以使其支持页面多语言切换
            </div>
            <div id="f-gridpager">
                <h2>GridPager</h2>
                GridPager是一款轻量级表格组件，用于列表显示和分页<br />
                <h3>Demo</h3>
                <div>
                    <div style="margin-top:20px;">
                        <input type="text" id="gridcondition1" />
                        <input type="button" onclick="RefreshGrid()" value="Search" />
                    </div>
                    <table class="table" id="mygrid"></table>
                </div>
                <h3>调用方法</h3>
                <p>
                    Html:只支持table标签
                    <pre>&lt;table class="table" id="mygrid"&gt;&lt;/table&gt;</pre>
                    Script,初始化
                    <pre>
$("#mygrid").gridpager({
    url: "/Home/LoadData",
    colmodel: [
        { name: "title1", title: "Title1", titlecn: "标题1" },
        { name: "title2", title: "Title2", titlecn: "标题2" },
        { name: "title3", title: "Title3", titlecn: "标题3" }
    ]
});
                    </pre>
                    Script,更新
                    <pre>$("#mygrid").gridpager('refresh', { Condition1: 'xxx' });</pre>
                    Controller:
                    <pre>
//参数pager为分页和排序相关参数，参数Condition1为查询条件
public JsonResult LoadData(GridPager pager,string Condition1)
{
    List<HomeIndexModel> models = new List<HomeIndexModel>();
    for (int i = 0; i < 120; i++)
    {
        models.Add(new HomeIndexModel
        {
            Content1 = $"Content{i}1",
            Content2 = $"Content{i}2",
            Content3 = $"Content{i}3",
        });
    }
    if(!string.IsNullOrEmpty(Condition1))
        models = models.FindAll(t => t.Content1.Contains(Condition1));
    //ToGridJson有两个重载，请参考下面的介绍
    var data = models.ToGridJson(ref pager, null, false);
    return Json(data, JsonRequestBehavior.AllowGet);
}
                    </pre>
                    ToGridJson()方法用于返回gridpager组件能识别的json格式数据，它有两个重载：<br />
                    1)IEnumerable的扩展：用于未分页数据，需要传入ref GridPager pager参数，以获取总记录数和总页数<br />
                    2)List的扩展：用于已分页数据，传入GridPager pager参数。本系统多为此情境。<br />
                </p>
                <h3>gridpager组件参数</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <td>参数</td>
                            <td>约束</td>
                            <td>类型</td>
                            <td>默认值</td>
                            <td>说明</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>url</td>
                            <td>必填</td>
                            <td>string</td>
                            <td>null</td>
                            <td>列表数据获取地址，组件通过ajax方法，请求这个地址以获得列表数据</td>
                        </tr>
                        <tr>
                            <td>colmodel</td>
                            <td>必填</td>
                            <td>object</td>
                            <td>null</td>
                            <td>列模型，定义表格的列，参考列模型参数的内容</td>
                        </tr>
                        <tr>
                            <td>shownum</td>
                            <td>可选</td>
                            <td>int</td>
                            <td>7</td>
                            <td>最多显示的分页按钮数量，多余的用...按钮填充</td>
                        </tr>
                        <tr>
                            <td>params</td>
                            <td>可选</td>
                            <td>object</td>
                            <td>null</td>
                            <td>请求url地址时附带的参数</td>
                        </tr>
                        <tr>
                            <td>callback</td>
                            <td>可选</td>
                            <td>function</td>
                            <td>null</td>
                            <td>数据加载完成后调用此方法</td>
                        </tr>
                    </tbody>
                </table>
                <h3>colmodel参数</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <td>参数</td>
                            <td>约束</td>
                            <td>类型</td>
                            <td>默认值</td>
                            <td>说明</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>title</td>
                            <td>必填</td>
                            <td>string</td>
                            <td>null</td>
                            <td>列英文标题</td>
                        </tr>
                        <tr>
                            <td>titlecn</td>
                            <td>必填</td>
                            <td>string/td>
                            <td>null</td>
                            <td>列中文标题</td>
                        </tr>
                        <tr>
                            <td>name</td>
                            <td>可选</td>
                            <td>string</td>
                            <td>null</td>
                            <td>列标志，排序时必填</td>
                        </tr>
                        <tr>
                            <td>width</td>
                            <td>可选</td>
                            <td>int</td>
                            <td></td>
                            <td>列宽，并非像素值，组件会跟据列宽，按比例显示</td>
                        </tr>
                        <tr>
                            <td>algin</td>
                            <td>可选</td>
                            <td>string</td>
                            <td>'left'</td>
                            <td>数据对齐方式，有效值：'left','center','right'</td>
                        </tr>
                        <tr>
                            <td>hideinxs</td>
                            <td>可选</td>
                            <td>bool</td>
                            <td>false</td>
                            <td>在小屏幕下隐藏此列</td>
                        </tr>
                        <tr>
                            <td>formatter</td>
                            <td>可选</td>
                            <td>function</td>
                            <td>null</td>
                            <td>数据格式化</td>
                        </tr>
                    </tbody>
                </table>
                <h3>gridpager方法</h3>
                <table class="table">
                    <tr>
                        <td>getpagerinfo</td>
                        <td>无参数</td>
                        <td>获取分页数据，包括总记录数，总页数，当前页等</td>
                    </tr>
                    <tr>
                        <td>refresh</td>
                        <td>params,查询条件</td>
                        <td>刷新组件，用于数据刷新或查询等操作</td>
                    </tr>
                </table>
            </div>
            <div id="f-dateranger">
                <h2>dateranger</h2>
                <p>dateranger是基于daterangepicker.js的封装，实现了页面多语言的切换，其参数请参考官方文档，<a href="http://www.daterangepicker.com/" target="_blank">查看</a></p>
                <h3>Demo</h3>
                <div>
                    <input type="text" id="dateranger" style="width:300px;" />
                    <input type="button" class="f-btn f-btn-normal" value="Get" onclick="GetSelectedDates()" />
                </div>
                <h3>HTML</h3>
                <pre>&lt;input type="text" id="dateranger" /&gt;</pre>
                <h3>JS,初始化</h3>
                <pre>
$('#dateranger').dateranger({
    //singleDatePicker: true,//true 单个选择器，false 两个选择器
    //timePicker:true,//可以选择时、分
    //startDate: moment().format('YYYY-MM-DD HH:mm'),//开始时间
    //endDate: moment().format('YYYY-MM-DD HH:mm'),//结束时间
    showDropdowns:false,//设置年、月是否可选择
    //autoUpdateInput: true,//选择日期后是否自动更新输入框，为true时，初始化会默认选中当前日期，为false时，没有默认值且始终不会更新输入框，需要手动更新
    minDate: moment('2018-01-01', 'YYYY-MM-DD HH:mm'),//可选择的最小时间
    maxDate: moment().endOf('year').format('YYYY-MM-DD HH:mm'),//可选择的最大时间
    format: 'YYYY-MM-DD HH:mm'//日期格式
});
</pre>
                <h3>Js 获取值</h3>
                <pre>$('#dateranger').dateranger('getvalues');</pre>
            </div>
            <div id="f-server">
                <h2>服务端</h2>
                <p>1)登录验证: AccessAttribute用于需要登录的请求验证，建议在controller上加入[Access]特性，若某方法支持匿名访问，可以在方法体上加上[AllowAnonymous]特性</p>
                <p>
                    2)防伪造请求: 所有修改数据库的操作，必须加入请求防伪验证<br />
                    页面(form内):
                    <pre>@@Html.AntiForgeryToken()</pre>
                    后端验证，加入[ValidateAntiForgeryToken]特性
                </p>
                <p>
                    3)用户基本信息缓存: 用户登录时，服务器缓存了用户的基本信息，包括用户ID，用户名，用户状态，商家名称，商家法币，Token<br />
                    所以在登录状态下，无需页面传回AccountId, 控制器中获取AccountId的方法AccountInfo.Id(需继承BaseController)<br />
                    当以后信息发生改变时，需要更新用户缓存，调用BaseController中的RefreshAccountInfo()方法以更新缓存
                    <pre>base.RefreshAccountInfo(accountInfo)</pre>
                    请谨慎修改此缓存数据，如果Token改变，用户将会掉线，请保存更新前后Token的一致
                </p>
            </div>
        </div>
    </div>
</div>
<script>
    $(function () {
        //---------日期控件--------------//
        $('#dateranger').dateranger({
            //singleDatePicker: true,//true 单个选择器，false 两个选择器
            //timePicker:true,//可以选择时、分
            //startDate: moment().format('YYYY-MM-DD HH:mm'),//开始时间
            //endDate: moment().format('YYYY-MM-DD HH:mm'),//结束时间
            showDropdowns:false,//设置年、月是否可选择
            //autoUpdateInput: true,//选择日期后是否自动更新输入框，为true时，初始化会默认选中当前日期，为false时，没有默认值且始终不会更新输入框，需要手动更新
            minDate: moment('2018-01-01', 'YYYY-MM-DD HH:mm'),//可选择的最小时间
            maxDate: moment().endOf('year').format('YYYY-MM-DD HH:mm'),//可选择的最大时间
            format: 'YYYY-MM-DD HH:mm'//日期格式
        });

        //---------表格控件--------------//
        $("#mygrid").gridpager({
            url: "/Home/LoadData",
            colmodel: [
                { name: "title1", title: "Title1", titlecn: "标题1", width: 10, hideinxs: true },
                { name: "title2", title: "Title2", titlecn: "标题2", algin: "left" },
                {
                    name: "title3", title: "Title3", titlecn: "标题3", formatter: function (v) {
                        return '<a>' + v + '</a>';
                    }
                }
            ]
        });
    });
    function RefreshGrid() {
        var con1 = $.trim($("#gridcondition1").val());
        $("#mygrid").gridpager('refresh', { Condition1: con1 });
    }
    function GetSelectedDates() {
        var result = $('#dateranger').dateranger('getvalues');
        //---------弹框控件--------------//
        swal({
            title: 'GetValues',//---------js获取多语言--------------//
            text: 'startDate:' + result.startDate + ", endDate:" + result.endDate,
            type: 'info'
        });
    }
</script>
<style>
    .f-docs > div{
        margin-top:20px;
    }
        .f-docs > div > h2 {
            margin-top: 40px;
            color: #3E82FE;
        }
</style>